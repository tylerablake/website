<!DOCTYPE html>
<html lang="en-us">

  <head>
  <link href="http://gmpg.org/xfn/11" rel="profile">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">

  <!-- Enable responsiveness on mobile devices-->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">

  <title>
    
       &middot; Tyler Blake
    
  </title>

  <!-- CSS -->
  <link rel="stylesheet" href="/public/css/poole.css">
  <link rel="stylesheet" href="/public/css/syntax.css">
  <link rel="stylesheet" href="/public/css/hyde.css">
  <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=PT+Sans:400,400italic,700|Abril+Fatface">

  <!-- Icons -->
  <!--<link rel="apple-touch-icon-precomposed" sizes="144x144" href="/public/apple-touch-icon-144-precomposed.png">
                                 <link rel="shortcut icon" href="/public/favicon.ico">-->

  <!-- RSS -->
  <link rel="alternate" type="application/rss+xml" title="RSS" href="/atom.xml">
</head>


  <body class="theme-base-0d">

    <div class="sidebar">
  <div class="container sidebar-sticky">
    <div class="sidebar-about">
      <h1>
        <a href="/">
          Tyler Blake
        </a>
      </h1>
      <p class="lead">Welcome to my website, where we go on quests through software development!</p>
    </div>

    <nav class="sidebar-nav">
      <a class="sidebar-nav-item" href="/">Home</a>

      

      
      
        
          
        
      
        
          
            <a class="sidebar-nav-item" href="/about/">About</a>
          
        
      
        
      
        
          
            <a class="sidebar-nav-item" href="/helpfulLinks/">Helpful Links</a>
          
        
      
        
          
        
      
      <a class="sidebar-nav-item" href="http://twitter.com/TylerBlakeLOU">Twitter</a>
      <a class="sidebar-nav-item" href="https://github.com/tylerablake">GitHub</a>
      <!--<span class="sidebar-nav-item">Currently v2.1.0</span>-->
    </nav>

    <p>&copy; 2017. All rights reserved.</p>
  </div>
</div>


    <div class="content container">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Tyler Blake</title>
 <link href="http://hyde.getpoole.com/atom.xml" rel="self"/>
 <link href="http://hyde.getpoole.com/"/>
 <updated>2017-05-05T16:36:44-04:00</updated>
 <id>http://hyde.getpoole.com</id>
 <author>
   <name>Tyler Blake</name>
   <email></email>
 </author>

 
 <entry>
   <title>ASP .NET MVC Tutorial &#58 Part 4</title>
   <link href="http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part4/"/>
   <updated>2016-08-01T00:00:00-04:00</updated>
   <id>http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part4</id>
   <content type="html">&lt;p&gt;This is a tutorial series showing how to get up and running with MVC. In this section we will discuss adding a model, controller, and views to your project.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-model&quot;&gt;Adding a Model&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Find the &lt;strong&gt;Models&lt;/strong&gt; folder in solution explorer and right click on it. Then select Add &amp;gt; Class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give it a meaningful name, in this instance, let’s say we need to fulfill a business requirement to manage Employees. We should name this class &lt;strong&gt;Employee&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then we want to add a couple of properties to that class. Let’s add a couple public properties: Id, FirstName, and LastName.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Id should be an it, so that line should look like this “public int Id {get;set;}”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; FirstName and LastName should be strings, so they should look like this “public string FirstName {get;set;}”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that we have started the creation of a new table in the database, we must inform EntityFramework about it. We’ll look at that next.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the IdentityModels.cs file inside of the &lt;strong&gt;Models&lt;/strong&gt; folder. And scroll down to where the DbSet declarations for the other models are and add a new one for our &lt;strong&gt;Employee&lt;/strong&gt; model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Refer back to the screen shot under &lt;strong&gt;DbContext and Mapping&lt;/strong&gt; section of Part 2 of the mvc tutorial if you need help finding this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a DbSet for our new &lt;strong&gt;Employee&lt;/strong&gt; class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that we have told EntityFramework about the new table we want it to create, we have to tell it to execute those changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open PackageManagerConsole and run &lt;strong&gt;Update-Database&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This step is required because when the app runs it tries to connect to the database and EntityFramework compares the models and properties in the solution to the tables and columns in the database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If they &lt;strong&gt;do not&lt;/strong&gt; match, then you will receive a “pending model changes error”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Running Update-Database does the same comparison but it updates the database tables and columns to match the model classes and properties inside the solution.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;adding-a-controller-and-views&quot;&gt;Adding a Controller and Views&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now we can work on scaffolding out the controller with views. Right click on the &lt;strong&gt;Controllers&lt;/strong&gt; folder and click &lt;strong&gt;Add &amp;gt; Controller&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;MVC 5 Controller with views, using EntityFramework&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inside the “Model Class” text box, enter “Employee”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The “Data Context Class” should be “ApplicationDbContext”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the “Generate Views” checkbox is checked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the “Use a layout page” checkbox is checked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter &lt;strong&gt;EmployeeController&lt;/strong&gt; inside of the “Controller Name” text box. Then click “Add”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the scaffolding process is finished you will have a new &lt;strong&gt;EmployeeController&lt;/strong&gt; file inside of your Controllers folder, as well as a new Employee folder inside of the Views folder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you should be able to navigate to “localhost:xxxx/Employee” and have CRUD functionality for employees.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;see-you-in-the-next-part-of-this-tutorial&quot;&gt;See you in the next part of this tutorial!&lt;/h4&gt;
</content>
 </entry>
 
 <entry>
   <title>ASP .NET MVC Tutorial &#58 Part 3</title>
   <link href="http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part3/"/>
   <updated>2016-08-01T00:00:00-04:00</updated>
   <id>http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part3</id>
   <content type="html">&lt;p&gt;This is a tutorial series showing how to get up and running with MVC. In this section we will set up the web config connection strings and connect to the database! Also, we will work on “seeding” the database.&lt;/p&gt;

&lt;h4 id=&quot;connection-strings&quot;&gt;Connection Strings&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;If you ran the solution now, by default there would be a database on your machine created with the name of LocalDB. The connection string for that database would look like this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/localDBConnectionString.png&quot; width=&quot;100%;&quot; height=&quot;50px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;But what does it mean?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;(LocalDb)\MSSQLLocalDB is the name of the SQL Server Express instance that will be created for you (it is built into Visual Studio). It is used to manage local databases for you.&lt;/li&gt;
  &lt;li&gt;Initial Catalog is the name of our database which is &lt;strong&gt;aspnet-DeveloperUniversity&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;transforms&quot;&gt;Transforms&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LocalDB instances of our databases are great for simple practice applications, but are not very practical for real world applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes we would like to use LocalDB for debugging in our development environment but connect to a customer’s database in production or release. This is where transforms come to the rescue!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Transforms are used in Web.Config files to tell the solution how to act depending on the environment that the solution is deployed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Below you can see that we have set some properties on our &lt;strong&gt;Release&lt;/strong&gt; connection string. We gave it an &lt;strong&gt;xdt.Locator&lt;/strong&gt; and &lt;strong&gt;xdt.Transform&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/transformAttributes.png&quot; width=&quot;400px;&quot; height=&quot;30px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The transform property tells the solution that we want to set the attributes.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Locator property tells the solution what part of the web.Config file we are looking to modify.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is all we must do to get the functionality we wanted, but there is 1 thing we must make sure of. The &lt;strong&gt;Name&lt;/strong&gt; property of the connection strings &lt;strong&gt;must must&lt;/strong&gt;. (Shown below)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;LocalDB Connection String&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/localDBConnectionString.png&quot; width=&quot;100%;&quot; height=&quot;50px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Release Connection String&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/releaseConnectionString.png&quot; width=&quot;100%;&quot; height=&quot;50px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;connecting-to-localdb-in-ssms&quot;&gt;Connecting to LocalDB in SSMS&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/connectingToLocalDB.png&quot; width=&quot;60%;&quot; height=&quot;300px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once you have connected to LocalDB you can open it in your object explorer and you may see your database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/localDBObjectExplorer.png&quot; width=&quot;50%;&quot; height=&quot;150px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you do not see your database in the object explorer this is perfectly normal, remember when we set up the DB context and piggy backed off of the IdentityContext? That context is set to not get initialized until someone tries to register a user or log into the application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So let’s run the application and register a user&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you may notice that once you enter credentials the application takes longer than normal to load. This is because the project is creating and seeding your database for you.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now once your application loads you can go back to SSMS and refresh the object explorer window and you will now see your database, but it will be empty because we haven’t configured any seeding of our database. So let’s do this now!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;seeding-the-database&quot;&gt;Seeding the Database&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Setting up your project to seed your database for you will help you in your development environment for debugging purposes without having to run through parts of your application manually to get data into your database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MVC projects automatically scaffold some sample code for you in the Seed() method so where and how to seed the database are already written out for you! All you have to do is fill in the Seed() method similar to the comments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that we have that done, let’s delete our DeveloperUniversity database and close connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To do this right click on “Developer University” in the object explorer and click “Delete”. Then make sure to check “Close Existing Connections” then click “Ok”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Do not worry, we will see how to recreate the database and run the Seed() method to insert the seed data into the database next.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/deleteDatabasePrompt.png&quot; width=&quot;100%;&quot; height=&quot;500px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most likely the tables have been generated but are still empty, lets run the &lt;strong&gt;Update-Database&lt;/strong&gt; command in the &lt;strong&gt;Package Manager Console&lt;/strong&gt;. As shown below, this will cause the seed method to fire immediately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/updateDatabaseCommand.png&quot; width=&quot;80%;&quot; height=&quot;100px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now your database should be seeded with test data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;see-you-in-the-next-part-of-this-tutorial&quot;&gt;See you in the next part of this tutorial!&lt;/h4&gt;
</content>
 </entry>
 
 <entry>
   <title>ASP .NET MVC Tutorial &#58 Part 2</title>
   <link href="http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part2/"/>
   <updated>2016-08-01T00:00:00-04:00</updated>
   <id>http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part2</id>
   <content type="html">&lt;p&gt;This is a tutorial series showing how to get up and running with MVC. In this section we will discuss routes,
how an MVC application works, and start writing some code!&lt;/p&gt;

&lt;h4 id=&quot;routes&quot;&gt;Routes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;MVC handles requests from clients through routes. You can set up custom routes through the route.config.&lt;/li&gt;
  &lt;li&gt;Lets take a look at the default convention for routing with MVC projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/defaultRouteConfig.png&quot; width=&quot;600px;&quot; height=&quot;150px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;*Here you can see that the &lt;strong&gt;Default&lt;/strong&gt; route for the application is:
  * Home controller
  * Index action
  * With an optional parameter (not required)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Routing in MVC is a very important concept so lets take a closer look.&lt;/li&gt;
  &lt;li&gt;When you navigate through your web application you can see the routing through the navigation bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/defaultRoutingUrl.png&quot; width=&quot;300px;&quot; height=&quot;30px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here you can see that code being executed is in the student controller, Index method.
&lt;strong&gt;Note&lt;/strong&gt;: Index might be left off because it isn’t needed in this instance, if you navigated to this page you would only see &lt;strong&gt;localhost:5626/Student&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you understand routing, let’s start writing some code shall we?!&lt;/p&gt;

&lt;h4 id=&quot;models&quot;&gt;Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Go to the “Models” folder and create a new class, let’s name it Student.cs. (We are going to write a school app).&lt;/li&gt;
  &lt;li&gt;Let’s make this class public and add a few properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/studentClass.png&quot; width=&quot;600px;&quot; height=&quot;350px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now you will receive a compiler error, we told the solution that our Student has a collection of Enrollments, but we haven’t created that class just yet so the compiler is angry. So let’s create the rest of the classes we need now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add 2 more classes to the Models folder, Enrollment.cs and Course.cs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/enrollmentClass.png&quot; width=&quot;500px;&quot; height=&quot;350px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/courseClass.png&quot; width=&quot;550px;&quot; height=&quot;250px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;controllers&quot;&gt;Controllers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Now we must create a controller for each of these models inside of our “Controllers” folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controllersSubfolders.png&quot; width=&quot;350px;&quot; height=&quot;150px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You will be asked how you would like the controller to be scaffolded, this means it will auto generate the controller for you based off of a data model and DbContext for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: While this will write a lot of code for you, it will cause a lot of “fluff” to be generated, which means excessive code that you do not need in your controller, you’ve been warned. It is &lt;strong&gt;best&lt;/strong&gt; to select “MVC 5 Controller - Empty”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;views&quot;&gt;Views&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Now that you have completed this step, you will notice that a corresponding folder has been created for you in the “Views” folder, 1 for each of the controllers you set up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/viewsSubfolder.png&quot; width=&quot;200px;&quot; height=&quot;150px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In each of these subfolders, you will have a file : “Index.cshtml”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: cshtml stands for c# html.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In these subfolders you will create a .cshtml file for each of your controller actions.&lt;/li&gt;
  &lt;li&gt;Below you can see that I already have an Index, Create, Edit, Delete, and Details methods in my Student controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/studentViewsFolder.png&quot; width=&quot;250px;&quot; height=&quot;150px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dbcontext-and-mapping&quot;&gt;DbContext and Mapping&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You almost have a running application! But first, you must tell Entity Framework about the models you created and how to map them to your database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inside of your “Models” folder, locate IdentityModels.cs, if you scroll down in this file you will see the creation of a class named ApplicationDbContext, this is the creation of the database context for your application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You could create your DbContext class in its own file but for the sake of this tutorial we are going to piggyback on the existing ApplicationDbContext.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/applicationDbContext.png&quot; width=&quot;500px;&quot; height=&quot;350px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here we tell Entity Framework how we want the Database to be created. We tell it that we want it to create 3 tables : Student, Enrollment, and Course (noted by the DbSets&amp;lt;&amp;gt; at the bottom of the file).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then we override the OnModelCreating() method, to tell it to remove the convention to pluralize table names.&lt;/p&gt;

    &lt;p&gt;Entity Framework by default would name the Student table, “Students”, which typically is not what you want to happen, so we tell Entity Framework to remove that convention for us.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we have to tell Entity Framework how we want the tables to be built. We told it we wanted tables for the models, but we haven’t specified what relationships we want them built on. Therefore, we created a Mapping folder, and inside of it, mapping files for each of our models.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mappingFolder.png&quot; width=&quot;200px;&quot; height=&quot;100px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/studentMapping.png&quot; width=&quot;600px;&quot; height=&quot;300px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Since we inherited from the EntityTypeConfiguration&amp;lt;&amp;gt; class, Entity Framework will look at our mapping files as a reference on how to build the relationships for the tables for us in the database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here you can see that we want a Student to have a primary key of Id, have required fields of FirstName, LastName, and EnrollmentDate, and we specify that a student may have many Enrollments. After all, what type of school only lets a student enroll in 1 course?!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;see-you-in-the-next-part-of-this-tutorial&quot;&gt;See you in the next part of this tutorial!&lt;/h4&gt;
</content>
 </entry>
 
 <entry>
   <title>ASP .NET MVC Tutorial &#58 Part 1</title>
   <link href="http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part1/"/>
   <updated>2016-08-01T00:00:00-04:00</updated>
   <id>http://hyde.getpoole.com/2016/08/01/mvc-tutorial-part1</id>
   <content type="html">&lt;p&gt;This is a tutorial series showing how to get up and running with MVC. Here we will talk about what
MVC means and take a look at some of the files that get created for us when we create a new ASP .NET MVC project.&lt;/p&gt;

&lt;h3 id=&quot;what-is-mvc&quot;&gt;What is MVC?&lt;/h3&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;MVC is an architecture pattern containing 3 aspects, Model, View, Controller.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; : This is aspect contains your data models.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; : This is the part of your application that users will see.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; : This is where the logic behind the view will live, this is the part that connects the view to the data models.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Open Visual Studio and create a new “ASP .NET Web Application” project.
&lt;img src=&quot;/assets/createProjectPrompt.png&quot; width=&quot;400px;&quot; height=&quot;350px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Select “MVC” template&lt;/li&gt;
  &lt;li&gt;(Optional) Check “Add Unit Tests” if you dare :)&lt;/li&gt;
  &lt;li&gt;By default, it will set individual account authentication for you.&lt;/li&gt;
  &lt;li&gt;Click “Ok” and voila, your first MVC project is on its way!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution-explorer&quot;&gt;Solution Explorer&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Now, a lot of files have been created in our solution explorer for us, but what are they?
&lt;img src=&quot;/assets/solutionExplorerContents.png&quot; height=&quot;400px;&quot; style=&quot;margin: auto;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;properties&quot;&gt;Properties&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Here you will find assembly information about your project.&lt;/li&gt;
  &lt;li&gt;Also, this is where the references for your project will live.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;app-data&quot;&gt;App Data&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;App_Data is essentially a storage point for file-based data stores (as opposed to a SQL server database store for example). Some simple sites make use of it for content stored as XML for example, typically where hosting charges for a DB are expensive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;appstart&quot;&gt;App_Start&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;These files provide the application information regarding what the application needs to run.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bundle.config&lt;/strong&gt; - This is where your dependent bundles are accessed such as Boostrap and jQuery.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Filter.config&lt;/strong&gt; - This is used to implement filters between users and your controllers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Identity.config&lt;/strong&gt; - This is where all the authentication gets initialized.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Route.config&lt;/strong&gt; - Here you could set up custom routes for your application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Startup.auth&lt;/strong&gt; - This is where the authentication for the site gets started.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;content&quot;&gt;Content&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This houses all things like CSS stylesheets, and images for your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;models&quot;&gt;Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Here is where you will place your data models for your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;views&quot;&gt;Views&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Here is where you will place your view code, each subfolder correlates to a controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;controllers&quot;&gt;Controllers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Here is where the routing for your site will take place.&lt;/li&gt;
  &lt;li&gt;You can place business logic here but I feel it is best practice to place your logic in services.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-about-those-files-at-the-bottom&quot;&gt;What about those files at the bottom?!&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ApplicationInsights.config&lt;/strong&gt; - This file is used by Azure and/or IIS which are used to deploy and run your site.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Global.asax&lt;/strong&gt; - Allows you to write code that runs in response to “system level” events, such as the application starting, a session ending, an application error occurring.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Packages.config&lt;/strong&gt; - A configuration file to manage the packages in your solution.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Startup.cs&lt;/strong&gt; - A file that tells the solution what needs to be executed on launch for the application to run correctly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web.config&lt;/strong&gt; - Here is where you set up configuration details for your application, such as connection strings for connecting to your database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we are acquainted with our solution explorer and files inside of it, now lets start working on our site.&lt;/p&gt;

&lt;h4 id=&quot;see-you-in-the-next-part-of-this-tutorial&quot;&gt;See you in the next part of this tutorial!&lt;/h4&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Jekyll and Hyde!</title>
   <link href="http://hyde.getpoole.com/2016/03/06/jekyll-and-hyde-blog/"/>
   <updated>2016-03-06T00:00:00-05:00</updated>
   <id>http://hyde.getpoole.com/2016/03/06/jekyll-and-hyde-blog</id>
   <content type="html">&lt;p&gt;Welcome! I am currently migrating my site to more of a blog site thanks to Jekyll and Hyde!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lessons Learned Along the Way (Episode 1)</title>
   <link href="http://hyde.getpoole.com/2016/03/02/lessons-learned-along-the-way/"/>
   <updated>2016-03-02T00:00:00-05:00</updated>
   <id>http://hyde.getpoole.com/2016/03/02/lessons-learned-along-the-way</id>
   <content type="html">&lt;p&gt;This is placeholder text for a blog series covering lessons I have learned along the way.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting Up Your Mac for .NET Development</title>
   <link href="http://hyde.getpoole.com/2016/03/01/.net-development-on-a-mac/"/>
   <updated>2016-03-01T00:00:00-05:00</updated>
   <id>http://hyde.getpoole.com/2016/03/01/.net-development-on-a-mac</id>
   <content type="html">&lt;p&gt;This is placeholder text for a blog on setting up my development environment for .NET development. More details coming soon!&lt;/p&gt;

&lt;h3 id=&quot;parallels-11-pro&quot;&gt;Parallels 11 Pro&lt;/h3&gt;

&lt;h4 id=&quot;general&quot;&gt;General&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Set “Configure for:” to “Software Development”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;options--optimization&quot;&gt;Options | Optimization&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Set “Performance” to “Faster Virtual Machine”&lt;/li&gt;
  &lt;li&gt;Uncheck “Enable Adaptive Hypervisor”&lt;/li&gt;
  &lt;li&gt;Check “Tune Windows for Speed”&lt;/li&gt;
  &lt;li&gt;Set “Power:” to “Better Performance”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hardware--cpu--memory&quot;&gt;Hardware | CPU &amp;amp; Memory&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Set RAM to 1/2 of your Macbook RAM&lt;/li&gt;
  &lt;li&gt;Uncheck “Enable Nested Virtualization”&lt;/li&gt;
  &lt;li&gt;Uncheck “Enable PMU Virtualization”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hardware--graphics&quot;&gt;Hardware | Graphics&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Set “3D Acceleration” to “Disabled”&lt;/li&gt;
  &lt;li&gt;Uncheck “Enable Virtical Synchronization”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;visual-studio-2015&quot;&gt;Visual Studio 2015&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Disable Browser Link&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools--options--environment--general&quot;&gt;Tools | Options | Environment | General&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Disable “Automatically adjust visual experience based on client performance”&lt;/li&gt;
  &lt;li&gt;Disable “Enable rich client visual experience”&lt;/li&gt;
  &lt;li&gt;Disable “Use hardware graphics acceleration if available”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools--options--debugging--general&quot;&gt;Tools | Options | Debugging | General&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Disable “Diagnostic Tools”&lt;/li&gt;
  &lt;li&gt;Disable “Perf Tips”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools--options--environment--startup&quot;&gt;Tools | Options | Environment | Startup&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Set “At startup:” to “Show empty environment”&lt;/li&gt;
  &lt;li&gt;Disable “Download content every:”&lt;/li&gt;
  &lt;li&gt;Set “Customize Start Page:” to “Default start page”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools--options--environment--codelens&quot;&gt;Tools | Options | Environment | CodeLens&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Disable any features you do not use in your daily workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resharper&quot;&gt;ReSharper&lt;/h3&gt;

&lt;h4 id=&quot;resharper--options--environment--intellisense--general&quot;&gt;ReSharper &amp;gt; Options &amp;gt; Environment &amp;gt; IntelliSense &amp;gt; General&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use Visual Studio default intellisense to help speed up typing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Disable Solution Wide Analysis&lt;/li&gt;
  &lt;li&gt;Disable Unit Tests (if you don’t use ReSharper for unit testing)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-helpful-links&quot;&gt;Other Helpful Links&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://indasoft.wordpress.com/2016/02/11/ultimate-guide-to-speeding-up-resharper-and-visual-studio/&quot;&gt;Ultimate Guide to Speeding Up ReSharper and Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lennybacon.com/post/2010/10/18/UltimateGuideToSpeedUpVisualStudio&quot;&gt;Ultimate Guide to speed up Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mspi.es/blog/5-Performance-Tweaks-for-Visual-Studio-2015-and-large-solutions&quot;&gt;5 Performance Tweaks for VS 2015 and Large Solutions&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>

    </div>

  </body>
</html>
