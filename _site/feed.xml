<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-01T11:20:23-04:00</updated><id>http://localhost:4000/</id><title type="html">Tyler Blake</title><subtitle>Stay a while and listen.</subtitle><author><name>Tyler Blake</name></author><entry><title type="html">Creating Modals</title><link href="http://localhost:4000/nativescript/2018/10/31/creating-modals.html" rel="alternate" type="text/html" title="Creating Modals" /><published>2018-10-31T00:00:00-04:00</published><updated>2018-08-03T09:30:00-04:00</updated><id>http://localhost:4000/nativescript/2018/10/31/creating-modals</id><content type="html" xml:base="http://localhost:4000/nativescript/2018/10/31/creating-modals.html">&lt;p&gt;Sometimes you don’t want to clutter a single page with a bunch of inputs, lets see how to use modals to help with this!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;One of the primary focuses for software is to collect user data, on mobile devices we have to be considerate of our users and make data entry easier for them.&lt;/p&gt;

&lt;p&gt;Sometimes we have to collect a lot of data so a common way to make this more pleasant for the user is to use modals.&lt;/p&gt;

&lt;p&gt;In this example I want to collect a date input from a user but I want to use a modal to show the DatePicker component.&lt;/p&gt;

&lt;h2 id=&quot;first-we-need-to-create-our-initial-form&quot;&gt;First we need to create our initial form&lt;/h2&gt;

&lt;p&gt;This is the page that will trigger the modal form and where we will return to after the modal action has completed.&lt;/p&gt;

&lt;p&gt;For this I have a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;Label&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TextField&lt;/code&gt; which contains an tap event like so &lt;code class=&quot;highlighter-rouge&quot;&gt;(tap)=&quot;onDateTap()&quot;&lt;/code&gt;&lt;/p&gt;

&lt;!-- ![Base Modal Form](http://localhost:4000/assets/images/base-modal-form.png){:class=&quot;img-responsive&quot;} --&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/base-modal-form.png&quot; class=&quot;img-responsive&quot; height=&quot;300&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;now-we-have-to-create-that-ondatetap-function&quot;&gt;Now we have to create that &lt;code class=&quot;highlighter-rouge&quot;&gt;onDateTap()&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;Here is all of the code for the base form. I have highlighted the &lt;code class=&quot;highlighter-rouge&quot;&gt;onDateTap()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/base-form-code.png&quot; alt=&quot;Base Form Code&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most important part here is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;context: this.date == null ? new Date() : this.date,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This means we are going to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;this.date&lt;/code&gt; to the modal to be set inside of the modal view.&lt;/p&gt;

&lt;p&gt;This is primarily for when a user wants to update the date, when we display the modal we want to display the value previously set for that field.&lt;/p&gt;

&lt;p&gt;Then when the modal is closed, the value isreturned to us as &lt;code class=&quot;highlighter-rouge&quot;&gt;dialogResult&lt;/code&gt; later in this function.&lt;/p&gt;

&lt;h2 id=&quot;now-we-have-to-create-the-modal&quot;&gt;Now we have to create the modal&lt;/h2&gt;

&lt;p&gt;Modals are nothing more than just another page with a form, the only trick is that we have to pass the data between the initial form and the modal form, and visa versa. Let’s look at how that happens.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/modal-example.png&quot; class=&quot;img-responsive&quot; height=&quot;300&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right now the modal is nothing more than a &lt;code class=&quot;highlighter-rouge&quot;&gt;StackLayout&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Button&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/modal-view-code.png&quot; alt=&quot;Modal View Code&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s look at the component code for this modal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/modal-component-code.png&quot; alt=&quot;Modal Component Code&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The important line in this component is this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.date = params.context;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That line sets the DatepickerModalComponent’s &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; property to the date we passed through the &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; property previously.&lt;/p&gt;

&lt;p&gt;After you set the date, we need to return to the intial form, all we have to do is set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;onDoneTap()&lt;/code&gt; function which has the following code:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.params.closeCallback(this.date);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All that does is close the modal dialog and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;this.date&lt;/code&gt; which is the updated value&lt;/p&gt;

&lt;h2 id=&quot;retrieving-the-modal-data&quot;&gt;Retrieving the modal data&lt;/h2&gt;

&lt;p&gt;Now we need to return to the initial form and update the date &lt;code class=&quot;highlighter-rouge&quot;&gt;TextField&lt;/code&gt; we had there&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/returning-data-from-modal.png&quot; alt=&quot;Returning Data From Modal&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And since we had the &lt;code class=&quot;highlighter-rouge&quot;&gt;TextField&lt;/code&gt; one way binded to the date property on the component like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[text]=&quot;date | date:'shortDate'&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We see this after hitting done on the modal page&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/updated-base-modal-form.png&quot; class=&quot;img-responsive&quot; height=&quot;300&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you know to to create modals to make user input more pleasant.&lt;/p&gt;

&lt;p&gt;Don’t forget that you can use a modal for any data entry, it doesn’t have to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: You can only have 1 modal open at a time. You can not open 1 modal which opens a 2nd modal, you must close each modal before opening another one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or comments feel free to leave them below and as always, stop by and check out the NativeScript docs :) &lt;a href=&quot;http://docs.nativescript.org&quot; title=&quot;NativeScript Docs Link&quot;&gt;NativeScript Docs&lt;/a&gt;&lt;/p&gt;</content><author><name>Tyler Blake</name></author><category term="Intro" /><category term="Overview" /><category term="NativeScript" /><summary type="html">Sometimes you don’t want to clutter a single page with a bunch of inputs, lets see how to use modals to help with this!</summary></entry><entry><title type="html">Accessing Native APIs with NativeScript</title><link href="http://localhost:4000/nativescript/2018/08/03/accessing-native-apis.html" rel="alternate" type="text/html" title="Accessing Native APIs with NativeScript" /><published>2018-08-03T00:00:00-04:00</published><updated>2018-08-03T09:30:00-04:00</updated><id>http://localhost:4000/nativescript/2018/08/03/accessing-native-apis</id><content type="html" xml:base="http://localhost:4000/nativescript/2018/08/03/accessing-native-apis.html">&lt;p&gt;One of the biggest advantages of NativeScript is the ability to access native device API’s. In this post I’ll show you how.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Many other hybrid frameworks don’t allow you to access device API’s which causes limitations to app capability and performance. At first it sounds intimidating especially if you haven’t written any Swift/Java code before but it will be a lot less scary after this post.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First let’s navigate to the app root directory and run this command to add TNS Platform Delcarations&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install tns-platform-declarations --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, let’s run the following command to create an empty reference.d.ts file&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch reference.d.ts&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the reference.d.ts file inside of your preferred IDE and add the following lines.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/// &amp;lt;reference path=&quot;./node_modules/tns-platform-declarations/ios/ios.d.ts&quot; /&amp;gt;&lt;/code&gt;      &lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;/// &amp;lt;reference path=&quot;./node_modules/tns-platform-declarations/android/android.d.ts&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note: If only developing for iOS or Android and not both, comment out the reference path for the platform you are not developing for, this helps speed up your development experience greatly!&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Save the file and now you are ready to start accessing native device API’s!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In steps 1-4 we basically added intellisense for native API’s, without doing that it is very painful to develop using native API’s if you don’t know the API’s by memory.&lt;/p&gt;

&lt;p&gt;Let’s look at how to use this new knowledge to do some cool stuff!&lt;/p&gt;

&lt;p&gt;First let’s add an element to the page, in this case a button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/viewChildButton.png&quot; alt=&quot;ViewChild Button&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then let’s retrieve access to that element (in this case it is a button) inside of our component using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ViewChild&lt;/code&gt; directive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/viewChildReference.png&quot; alt=&quot;ViewChild Reference&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That gives us a reference to the element, but since we are using NativeScript that element reference isn’t quite the “Native” access we are looking for, in order to do that we need to drill into the exampleButton.&lt;/p&gt;

&lt;p&gt;Here is an example of how to do that in iOS:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/nativeIosButtonReference.png&quot; alt=&quot;Native iOS Element Reference&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect! We have a button, and a reference to the Native element, in this case since we are building for iOS we have a reference to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, I have no idea about all of the possibilities that come with a UIButton….but this is where steps 1-4 from earlier come in. What happens if we type &lt;code class=&quot;highlighter-rouge&quot;&gt;iosButton.&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/nativeApiIntellisense.png&quot; alt=&quot;Native iOS API Intellisense&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So many APIs!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/soManyApis.png&quot; class=&quot;img-responsive&quot; height=&quot;250&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily since we added TNS Platform Declarations earlier, we now have access to “Go To Definition” on these native classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/goToDefinition.png&quot; alt=&quot;Go To Definition&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can drill into the &lt;code class=&quot;highlighter-rouge&quot;&gt;userInteractionEnabled&lt;/code&gt; property and see all 15,000+ lines of properties and methods we have access to within &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;, and that is just 1 of the many files for native iOS API’s!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/apiReferenceFile.png&quot; alt=&quot;API Reference File&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can do all sorts of extra customizations to your apps. These steps can be replicated on all UI controls, including ListViews, Layouts, etc.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments feel free to leave them below. If you would like more info on this topic check out some of the following resources:&lt;/p&gt;

&lt;p&gt;A presentation by Robert Laverty: &lt;a href=&quot;http://www.youtube.com/watch?v=zCdbrkmvdVI&quot; title=&quot;Robert Laverty Presentation Link&quot;&gt;Robert Laverty Presentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as always, the NativeScript docs :) &lt;a href=&quot;http://docs.nativescript.org&quot; title=&quot;NativeScript Docs Link&quot;&gt;NativeScript Docs&lt;/a&gt;&lt;/p&gt;</content><author><name>Tyler Blake</name></author><category term="Intro" /><category term="Overview" /><category term="NativeScript" /><summary type="html">One of the biggest advantages of NativeScript is the ability to access native device API’s. In this post I’ll show you how.</summary></entry><entry><title type="html">Setting Up Your Machine</title><link href="http://localhost:4000/environment/2018/07/17/setting-up-your-machine.html" rel="alternate" type="text/html" title="Setting Up Your Machine" /><published>2018-07-17T00:00:00-04:00</published><updated>2018-07-17T06:30:00-04:00</updated><id>http://localhost:4000/environment/2018/07/17/setting-up-your-machine</id><content type="html" xml:base="http://localhost:4000/environment/2018/07/17/setting-up-your-machine.html">&lt;p&gt;There are many different ways to set up your development environment for NativeScript. Here I’ll show you mine.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The following shows the list I use to set up my machine for NativeScript development on my Mac.&lt;/p&gt;

&lt;p&gt;If you are not recovering from a computer crash like me, then you can ignore reformatting your Mac :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Replace iTerm2 with your preferred terminal and VSCode with your preferred IDE&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;optional&quot;&gt;Optional&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Open Disk Utility and Reformat “Macintosh HD”&lt;/li&gt;
  &lt;li&gt;Reinstall Mac OS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install Chrome&lt;/li&gt;
  &lt;li&gt;Install iTerm2&lt;/li&gt;
  &lt;li&gt;Open iTerm2&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create/Import .bash_prompt&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;touch .bash_prompt&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create/Import .bash_profile&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;touch .bash_profile&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create/Import .git_completion.sh&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;touch .git_completion.sh&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create/Import .git_prompt.sh&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;touch .git_prompt.sh&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Homebrew&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install nvm&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the latest version of Node via nvm&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm install node&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install NativeScript CLI&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g nativescript&lt;/code&gt; in iTerm2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Xcode&lt;/li&gt;
  &lt;li&gt;Open Xcode (Accept the prompt to install tools)&lt;/li&gt;
  &lt;li&gt;Go to Xcode/Preferences/Locations and Select “Xcode x.x.x” in the Command Line Tools dropdown&lt;/li&gt;
  &lt;li&gt;Install Android Studio&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the ruby NativeScript setup command in iTerm2&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -e &quot;$(curl -fsSL https://www.nativescript.org/setup/mac)&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;tns doctor&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Follow the prompts and allow it to set up iOS and Android requirements for you&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Fix any issues found by the doctor&lt;/em&gt; :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note: See the Common Issues and Fixes section below for solutions I found that might help you&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;tns doctor&lt;/code&gt; in iTerm2 to see if you fixed all issues&lt;/li&gt;
  &lt;li&gt;Open Android Virtual Device Manager and Create an Android emulator&lt;/li&gt;
  &lt;li&gt;Start the emulator manually to make sure it was set up correctly&lt;/li&gt;
  &lt;li&gt;Install VS Code&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;tns create testApp --template tns-template-blank-ng&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;cd testApp&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;cd app&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;tns run ios --emulator&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Once the iOS simulator loads the app press &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;tns run android&lt;/code&gt; in iTerm2&lt;/li&gt;
  &lt;li&gt;Once the Android simulator loads the app press &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in iTerm2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you were able to get the iOS simulator and Android emulator to load the blank template app then you are done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Still having issues? Here is what you can do&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Refer to the NativeScript Documentation on installation&lt;/li&gt;
  &lt;li&gt;Google your specific error message, someone likely has seen and fixed your exact error&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-apps&quot;&gt;Additional Apps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;f.lux&lt;/strong&gt;: Helps reduce eye strain&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BetterSnapTool&lt;/strong&gt;: Makes window management a breeze&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tunnelbear&lt;/strong&gt;: My preferred VPN client&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Charles&lt;/strong&gt;: Proxy to help debug network calls on mobile device and inside of iOS simulator&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spotify&lt;/strong&gt;: Music is good for the soul!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-osx-setup&quot;&gt;Additional OSX Setup&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Just a few things I like to do as well&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Preferences/Accessibility/Keyboard/Keyboard Preferences/Shortcuts Select “All Controls” at the bottom&lt;/p&gt;

    &lt;p&gt;Allows you to tab through buttons/options in OSX dialogs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preferences/Displays Uncheck “Automatically Adjust Brightness”&lt;/p&gt;

    &lt;p&gt;I find this annoying&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preferences/Energy Saver Increase threshold for turning off display&lt;/p&gt;

    &lt;p&gt;I also find this annoying&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;common-issues-and-fixes&quot;&gt;Common Issues and Fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Missing/Unable to find ANDROID_HOME variable&lt;/p&gt;

    &lt;p&gt;To fix run &lt;code class=&quot;highlighter-rouge&quot;&gt;export ANDROID_HOME=/Users/$(whoami)/Library/Android/sdk&lt;/code&gt; in iTerm2`&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Missing Android SDK version 23&amp;lt;= and &amp;gt;=27&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Open Android Studio&lt;/li&gt;
      &lt;li&gt;Open SDK Manager&lt;/li&gt;
      &lt;li&gt;Check the checkbox next to a version between 23 and 27.&lt;/li&gt;
      &lt;li&gt;Click Accept/Install&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run into any issues I didn’t, stop by the &lt;a href=&quot;http://docs.nativescript.org/start/quick-setup&quot; title=&quot;NativeScript Setup Link&quot;&gt;NativeScript Setup Docs&lt;/a&gt; for a more in depth setup guide.&lt;/p&gt;</content><author><name>Tyler Blake</name></author><category term="Setup" /><category term="Environment" /><category term="NativeScript" /><summary type="html">There are many different ways to set up your development environment for NativeScript. Here I’ll show you mine.</summary></entry><entry><title type="html">Understanding Grid Layouts</title><link href="http://localhost:4000/nativescript/2018/07/03/understanding-grid-layouts.html" rel="alternate" type="text/html" title="Understanding Grid Layouts" /><published>2018-07-03T00:00:00-04:00</published><updated>2018-07-03T08:43:00-04:00</updated><id>http://localhost:4000/nativescript/2018/07/03/understanding-grid-layouts</id><content type="html" xml:base="http://localhost:4000/nativescript/2018/07/03/understanding-grid-layouts.html">&lt;p&gt;NativeScript has many different layouts, let’s dig into grid layouts for a few.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-grids&quot;&gt;Basic Grids&lt;/h2&gt;

&lt;p&gt;Here is an example of a &lt;strong&gt;1x3&lt;/strong&gt;  grid layout:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/example1x3Grid.png&quot; alt=&quot;Example 1x3 Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of a &lt;strong&gt;2x3&lt;/strong&gt;  grid layout:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/example2x3Grid.png&quot; alt=&quot;Example 2x3 Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;recap&quot;&gt;Recap:&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;GridLayout&lt;/strong&gt; is just that, you have columns and rows. In the 2x3 grid layout, we are telling NativeScript that we want it to generate a grid that has 2 columns and 3 rows. After you populate the &lt;code class=&quot;highlighter-rouge&quot;&gt;rows&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;columns&lt;/code&gt; attributes of the GridLayout, you have to tell the elements within the GridLayout where they should be positioned within the grid through the &lt;code class=&quot;highlighter-rouge&quot;&gt;col&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;row&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;GridLayout row and column definitions are &lt;strong&gt;zero based&lt;/strong&gt;. This means &lt;code class=&quot;highlighter-rouge&quot;&gt;row=&quot;0&quot;&lt;/code&gt; actually refers to the first row in the grid.&lt;/p&gt;

&lt;p&gt;You can make a GridLayout have as many rows/columns as you like/need.&lt;/p&gt;

&lt;h2 id=&quot;rowspan-and-colspan&quot;&gt;RowSpan and ColSpan&lt;/h2&gt;

&lt;p&gt;Here is an example using the rowSpan attribute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/rowSpan.png&quot; alt=&quot;Example RowSpan Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how we told it to make the orange StackLayout in column 1 row 0 to span 3 rows, in this instance it will span the entire grid since it only has 3 rows.&lt;/p&gt;

&lt;p&gt;Now lets see what happens when you use both the rowSpan and colSpan attributes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/colSpanAndRowSpan.png&quot; alt=&quot;Example RowSpan and ColSpan Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;recap-1&quot;&gt;Recap:&lt;/h3&gt;
&lt;p&gt;In this example we told the orange StackLayout to span 2 rows instead of 3 which will make it span 2 out of 3 rows in the GridLayout this time. We also made the green StackLayout span 2 columns which will make it span the entire width.&lt;/p&gt;

&lt;h2 id=&quot;what-does--do&quot;&gt;What does * do?&lt;/h2&gt;

&lt;p&gt;Setting a row or column to &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; makes it take up the rest of the space available. If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;rows=&quot;*,*&quot;&lt;/code&gt; then you will get 2 rows, 1 takes up the top 50% of the space available, the other takes up the bottom 50%. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/usingStars.png&quot; alt=&quot;Example Grid using stars&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;recap-2&quot;&gt;Recap:&lt;/h3&gt;
&lt;p&gt;In this example we made a grid with 2 columns, one with a defined size of 50, the other is &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;. We have 3 rows, two with a defined size of 100, and the last is &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;. We can see that the manually defined size rows/columns are generated and the row and column with &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; size stretch the rest of the space available.&lt;/p&gt;

&lt;h2 id=&quot;explicit-row-and-column-sizes&quot;&gt;Explicit Row and Column Sizes&lt;/h2&gt;

&lt;p&gt;In the last example we manually defined some column and row sizes in the GridLayout instead of just using &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;. Here is another example of that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/usingManualWidths.png&quot; alt=&quot;Example RowSpan and ColSpan Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;recap-3&quot;&gt;Recap:&lt;/h3&gt;
&lt;p&gt;Here we can see that the rows are evenly divideded upon the space available. However, the columns are not. The first column is 100 pixels wide, and the second is 300 pixels wide. This can come in handy when you have very specific requirements or needs for your GridLayout.&lt;/p&gt;

&lt;h2 id=&quot;what-about-auto&quot;&gt;What about Auto?&lt;/h2&gt;

&lt;p&gt;Using the auto value for a column or width will have the row or column take up as much space is needed. Lets see that in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/autoAndStar.png&quot; alt=&quot;Example Auto and Star Grid&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;recap-4&quot;&gt;Recap:&lt;/h3&gt;
&lt;p&gt;Here we have a GridLayout with 1 row and 2 columns. The columns are defined with &lt;code class=&quot;highlighter-rouge&quot;&gt;columns=&quot;auto,*&quot;&lt;/code&gt; inside the GridLayout. We know that the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; means the second column will stretch the rest of the space available. The auto value means that the first column will use as much space as it needs. Since we gave that StackLayout a width of 50 pixels, the first column will only take up 50 pixels.&lt;/p&gt;

&lt;p&gt;Now you can go create all kinds of cool GridLayouts!&lt;/p&gt;

&lt;p&gt;More blog posts &lt;strong&gt;are coming&lt;/strong&gt; but in the meantime, stop by the &lt;a href=&quot;http://docs.nativescript.org&quot; title=&quot;NativeScript Docs Link&quot;&gt;NativeScript Docs&lt;/a&gt; to learn more!&lt;/p&gt;</content><author><name>Tyler Blake</name></author><category term="Intro" /><category term="Overview" /><category term="NativeScript" /><summary type="html">NativeScript has many different layouts, let’s dig into grid layouts for a few.</summary></entry><entry><title type="html">What Is NativeScript?</title><link href="http://localhost:4000/nativescript/2018/07/01/what-is-nativescript.html" rel="alternate" type="text/html" title="What Is NativeScript?" /><published>2018-07-01T00:00:00-04:00</published><updated>2018-04-11T23:13:00-04:00</updated><id>http://localhost:4000/nativescript/2018/07/01/what-is-nativescript</id><content type="html" xml:base="http://localhost:4000/nativescript/2018/07/01/what-is-nativescript.html">&lt;p&gt;NativeScript is how you build cross-platform, native iOS and Android apps with JavaScript, but what does that really mean?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;It means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You get to use Angular, TypeScript or JavaScript&lt;/li&gt;
  &lt;li&gt;You get truly native UI performance&lt;/li&gt;
  &lt;li&gt;You can reuse skills and code from your web projects&lt;/li&gt;
  &lt;li&gt;You also get 100% access to native device API’s via JavaScript&lt;/li&gt;
  &lt;li&gt;You get reuse of packages from npm, CocoaPods, and Gradle&lt;/li&gt;
  &lt;li&gt;It is open source&lt;/li&gt;
  &lt;li&gt;It is backed by Progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blog posts &lt;strong&gt;are coming&lt;/strong&gt; but in the meantime, stop by the &lt;a href=&quot;http://docs.nativescript.org&quot; title=&quot;NativeScript Docs Link&quot;&gt;NativeScript Docs&lt;/a&gt; to learn more!&lt;/p&gt;</content><author><name>Tyler Blake</name></author><category term="Intro" /><category term="Overview" /><category term="NativeScript" /><summary type="html">NativeScript is how you build cross-platform, native iOS and Android apps with JavaScript, but what does that really mean?</summary></entry><entry><title type="html">Hello Hydeout</title><link href="http://localhost:4000/2018/04/05/hello-hydeout.html" rel="alternate" type="text/html" title="Hello Hydeout" /><published>2018-04-05T00:00:00-04:00</published><updated>2018-04-05T00:00:00-04:00</updated><id>http://localhost:4000/2018/04/05/hello-hydeout</id><content type="html" xml:base="http://localhost:4000/2018/04/05/hello-hydeout.html">&lt;p&gt;Hydeout updates the original &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt;
theme for &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; 3.x and adds new functionality.&lt;/p&gt;

&lt;h3 id=&quot;keep-it-simple&quot;&gt;Keep It Simple&lt;/h3&gt;

&lt;p&gt;In keeping with the original Hyde theme, Hydeout aims to keep the overall
design lightweight and plugin-free. JavaScript is currently limited only
to Disqus and Google Analytics (and is only loaded if you provide configuration
variables).&lt;/p&gt;

&lt;p&gt;Hydeout makes heavy use of Flexbox in its CSS. If Flexbox is not available,
the CSS degrades into a single column layout.&lt;/p&gt;

&lt;h3 id=&quot;customization&quot;&gt;Customization&lt;/h3&gt;

&lt;p&gt;Hydeout replaces Hyde’s class-based theming with the use
of the following SASS variables:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sidebar-bg-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#202020&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sidebar-sticky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$layout-reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$link-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#268bd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To override these variables, create your own &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/css/main.scss&lt;/code&gt; file.
Define your own variables, then import in Hydeout’s SCSS, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
# Jekyll needs front matter for SCSS files
---

$sidebar-bg-color: #ac4142;
$link-color: #ac4142;
$sidebar-sticky: false;
@import &quot;hydeout&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the &lt;a href=&quot;_sass/hydeout/_variables.scss&quot;&gt;_variables&lt;/a&gt; file for other variables
you can override.&lt;/p&gt;

&lt;p&gt;You can also insert custom head tags (e.g. to load your own stylesheets) by
defining your own &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/custom-head.html&lt;/code&gt; or insert tags at the end
of the body (e.g. for custom JS) by defining your own
&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/custom-foot.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hydeout also adds a new tags page (accessible in the sidebar) and a new
“category” layout for dedicated category pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Category pages are automatically added to the sidebar. All other pages
must have &lt;code class=&quot;highlighter-rouge&quot;&gt;sidebar_link: true&lt;/code&gt; in their front matter to show up in
the sidebar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A simple redirect-to-Google search is available. If you want to use
Google Custom Search or Algolia or something with more involved,
override the &lt;code class=&quot;highlighter-rouge&quot;&gt;search.html&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Disqus integration is ready out of the box. Just add the following to
your config file:&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shortname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-disqus-shortname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you don’t want Disqus or want to use something else, override
&lt;code class=&quot;highlighter-rouge&quot;&gt;comments.html&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Google Analytics support, define a &lt;code class=&quot;highlighter-rouge&quot;&gt;google_analytics&lt;/code&gt; variable with
your property ID in your config file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s also a bunch of minor tweaks and adjustments throughout the
theme. Hope this works for you!&lt;/p&gt;</content><author><name>Tyler Blake</name></author><summary type="html">Hydeout updates the original Hyde theme for Jekyll 3.x and adds new functionality. Keep It Simple In keeping with the original Hyde theme, Hydeout aims to keep the overall design lightweight and plugin-free. JavaScript is currently limited only to Disqus and Google Analytics (and is only loaded if you provide configuration variables). Hydeout makes heavy use of Flexbox in its CSS. If Flexbox is not available, the CSS degrades into a single column layout. Customization Hydeout replaces Hyde’s class-based theming with the use of the following SASS variables: $sidebar-bg-color: #202020 !default; $sidebar-sticky: true !default; $layout-reverse: false !default; $link-color: #268bd2 !default; To override these variables, create your own assets/css/main.scss file. Define your own variables, then import in Hydeout’s SCSS, like so: --- # Jekyll needs front matter for SCSS files --- $sidebar-bg-color: #ac4142; $link-color: #ac4142; $sidebar-sticky: false; @import &quot;hydeout&quot;; See the _variables file for other variables you can override. You can also insert custom head tags (e.g. to load your own stylesheets) by defining your own _includes/custom-head.html or insert tags at the end of the body (e.g. for custom JS) by defining your own _includes/custom-foot.html. New Features Hydeout also adds a new tags page (accessible in the sidebar) and a new “category” layout for dedicated category pages. Category pages are automatically added to the sidebar. All other pages must have sidebar_link: true in their front matter to show up in the sidebar. A simple redirect-to-Google search is available. If you want to use Google Custom Search or Algolia or something with more involved, override the search.html. Disqus integration is ready out of the box. Just add the following to your config file: disqus: shortname: my-disqus-shortname If you don’t want Disqus or want to use something else, override comments.html. For Google Analytics support, define a google_analytics variable with your property ID in your config file. There’s also a bunch of minor tweaks and adjustments throughout the theme. Hope this works for you!</summary></entry><entry><title type="html">Introducing Hyde</title><link href="http://localhost:4000/2018/04/02/introducing-hyde.html" rel="alternate" type="text/html" title="Introducing Hyde" /><published>2018-04-02T00:00:00-04:00</published><updated>2018-04-02T00:00:00-04:00</updated><id>http://localhost:4000/2018/04/02/introducing-hyde</id><content type="html" xml:base="http://localhost:4000/2018/04/02/introducing-hyde.html">&lt;p&gt;Hyde is a brazen two-column &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that pairs a prominent sidebar with uncomplicated content. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Hyde here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/feed.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hyde-features&quot;&gt;Hyde features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Hyde adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/hyde#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/hyde#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Hyde is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Hyde is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name>Tyler Blake</name></author><summary type="html">Hyde is a brazen two-column Jekyll theme that pairs a prominent sidebar with uncomplicated content. It’s based on Poole, the Jekyll butler. Built on Poole Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by @mdo. Poole, and every theme built on it (like Hyde here) includes the following: Complete Jekyll setup included (layouts, config, 404, RSS feed, posts, and example page) Mobile friendly design and development Easily scalable text and component sizing with rem units in the CSS Support for a wide gamut of HTML elements Related posts (time-based, because Jekyll) below each post Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter) Hyde features In addition to the features of Poole, Hyde adds the following: Sidebar includes support for textual modules and a dynamically generated navigation with active link support Two orientations for content and sidebar, default (left sidebar) and reverse (right sidebar), available via &amp;lt;body&amp;gt; classes Eight optional color schemes, available via &amp;lt;body&amp;gt; classes Head to the readme to learn more. Browser support Hyde is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above. Download Hyde is developed on and hosted with GitHub. Head to the GitHub repository for downloads, bug reports, and features requests. Thanks!</summary></entry></feed>